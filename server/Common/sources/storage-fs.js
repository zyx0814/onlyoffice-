/*
 * (c) Copyright Ascensio System Limited 2010-2017. All rights reserved
 *
 * http://www.teamlab.com 
 *
 * Version: 4.2.10 (build:10)
 */
var fs = require('fs');var path = require('path');var mkdirp = require('mkdirp');var utils = require("./utils");var crypto = require('crypto');var configStorage = require('config').get('storage');var cfgBucketName = configStorage.get('bucketName');var cfgStorageFolderName = configStorage.get('storageFolderName');var cfgStorageExternalHost = configStorage.get('externalHost');var configFs = configStorage.get('fs');var cfgStorageFolderPath = configFs.get('folderPath');var cfgStorageSecretString = configFs.get('secretString');function getFilePath(strPath) {  return path.join(cfgStorageFolderPath, strPath);}function getOutputPath(strPath) {  return strPath.replace(/\\/g, '/');}function removeEmptyParent(strPath, done) {  if (cfgStorageFolderPath.length + 1 >= strPath.length) {    done();  } else {    fs.readdir(strPath, function(err, list) {      if (err) {        done();      } else {        if (list.length > 0) {          done();        } else {          fs.rmdir(strPath, function(err) {            if (err) {              done();            } else {              removeEmptyParent(path.dirname(strPath), function(err) {                done(err);              });            }          });        }      }    });  }}exports.getObject = function(strPath) {  return utils.readFile(getFilePath(strPath));};exports.putObject = function(strPath, buffer, contentLength) {  return new Promise(function(resolve, reject) {    var fsPath = getFilePath(strPath);    mkdirp(path.dirname(fsPath), function(err) {      if (err) {        reject(err);      } else {        if (Buffer.isBuffer(buffer)) {          fs.writeFile(fsPath, buffer, function(err) {            if (err) {              reject(err);            } else {              resolve();            }          });        } else {          utils.promiseCreateWriteStream(fsPath).then(function(writable) {            buffer.pipe(writable);          }).catch(function(err) {            reject(err);          });        }      }    });  });};exports.listObjects = function(strPath) {  return utils.listObjects(getFilePath(strPath)).then(function(values) {    return values.map(function(curvalue) {      return getOutputPath(curvalue.substring(cfgStorageFolderPath.length + 1));    });  });};exports.deleteObject = function(strPath) {  return new Promise(function(resolve, reject) {    var fsPath = getFilePath(strPath);    fs.unlink(fsPath, function(err) {      if (err) {        reject(err);      } else {        removeEmptyParent(path.dirname(fsPath), function(err) {          if (err) {            reject(err);          } else {            resolve();          }        });      }    });  });};exports.deleteObjects = function(strPaths) {  return Promise.all(strPaths.map(exports.deleteObject));};exports.getSignedUrl = function(baseUrl, strPath, optUrlExpires, optFilename, opt_type) {  return new Promise(function(resolve, reject) {    var userFriendlyName = optFilename ? encodeURIComponent(optFilename.replace(/\//g, "%2f")) : path.basename(strPath);    var uri = '/' + cfgBucketName + '/' + cfgStorageFolderName + '/' + strPath + '/' + userFriendlyName;    var url = (cfgStorageExternalHost ? cfgStorageExternalHost : baseUrl) + uri;    var date = new Date();    var expires = Math.ceil(date.getTime() / 1000) + (optUrlExpires || 604800);    var md5 = crypto.createHash('md5').update(/*expires + */uri + cfgStorageSecretString).digest("base64");    md5 = md5.replace(/\+/g, "-");    md5 = md5.replace(/\//g, "_");    url += ('?md5=' + md5 + '&expires=' + expires);    url += '&disposition=' + encodeURIComponent(utils.getContentDisposition(null, null, opt_type));    resolve(utils.changeOnlyOfficeUrl(url, strPath, optFilename));  });};